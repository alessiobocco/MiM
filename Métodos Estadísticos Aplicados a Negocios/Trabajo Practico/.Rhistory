formula_modelo_condicion)
lm_coef <-
bt_resamples %>%
dplyr::select(-splits) %>%
# Turn it into a tibble by stacking the `models` col
unnest() %>%
dplyr::mutate(condition = condicion) %>%
# Get rid of unneeded columns
dplyr::select(id, condition, term, estimate, std.error, statistic,  p.value)
}
)
histograma_coeficientes_condicion <- ggplot2::ggplot(data = bootstrap_model_condition,
ggplot2::aes(x = estimate, fill = as.factor(condition))) +
ggplot2::geom_density(alpha = 0.4) +
ggplot2::scale_fill_discrete(name = 'Condición') +
ggplot2::facet_wrap(.~term, scales = 'free') +
ggplot2::theme_bw() +
ggplot2::xlab("Coeficiente") + ggplot2::ylab("Cantidad obs.") +
ggplot2::theme(legend.position = 'bottom')
bootstrap_model_condition %>%
dplyr::group_by(condition, term) %>%
dplyr::summarise(estimate = mean(estimate))
histograma_coeficientes_condicion
bootstrap_model_condition %>%
dplyr::group_by(condition, term) %>%
dplyr::summarise(estimate = mean(estimate))
# Formula del modelo lineal
formula_modelo_clima <- formula("itemsold~desktop + post + desktop * post + precipitation + temp")
# Regresion por MCO
modelo_regresion_clima <- lm(formula_modelo_clima, data = data)
# Se itera sobre cada una de los remuestreos para el ajuste del modelo
# lineal y la extracción de los coeficientes
bootstrapped_samples$model <- purrr::map(.x = bootstrapped_samples$splits,
.f = lm_coefs, formula_modelo_clima)
histograma_coeficientes_condicion
# Se crean N remuestreos del dataset original
# TO DO: Elegir in R lo suficientemente grande, se usa 100 solo para pruebas
bootstrapped_samples_clima <- rsample::bootstraps(data, times = 1000)
# Se itera sobre cada una de los remuestreos para el ajuste del modelo
# lineal y la extracción de los coeficientes
bootstrapped_samples_clima$model <- purrr::map(.x = bootstrapped_samples_clima$splits,
.f = lm_coefs, formula_modelo_clima)
# Extraer los coeficientes ajustados para cada muestra y convertir en un
# data frame para poder graficar
lm_coef_clima <- bootstrapped_samples %>%
dplyr::select(-splits) %>%
# Apilar los tibbles en la variable model
tidyr::unnest(model) %>%
# Seleccionar las variables de interes
dplyr::select(id, term, estimate, std.error, statistic,  p.value) %>%
dplyr::mutate(term = factor(term, levels = c('(Intercept)', 'desktop', 'post', 'desktop:post', "temp", 'precipitation')))
histograma_coeficientes_clima <- ggplot2::ggplot(data = lm_coef_clima,
ggplot2::aes(x = estimate)) +
ggplot2::geom_density(alpha = 0.4) +
ggplot2::scale_fill_discrete(name = 'Condición') +
ggplot2::facet_wrap(.~term, scales = 'free') +
ggplot2::theme_bw() +
ggplot2::xlab("Coeficiente") + ggplot2::ylab("Cantidad obs.") +
ggplot2::theme(legend.position = 'bottom')
histograma_coeficientes_clima
# Extraer los coeficientes ajustados para cada muestra y convertir en un
# data frame para poder graficar
lm_coef_clima <- bootstrapped_samples_clima %>%
dplyr::select(-splits) %>%
# Apilar los tibbles en la variable model
tidyr::unnest(model) %>%
# Seleccionar las variables de interes
dplyr::select(id, term, estimate, std.error, statistic,  p.value) %>%
dplyr::mutate(term = factor(term, levels = c('(Intercept)', 'desktop', 'post', 'desktop:post', "temp", 'precipitation')))
histograma_coeficientes_clima <- ggplot2::ggplot(data = lm_coef_clima,
ggplot2::aes(x = estimate)) +
ggplot2::geom_density(alpha = 0.4) +
ggplot2::scale_fill_discrete(name = 'Condición') +
ggplot2::facet_wrap(.~term, scales = 'free') +
ggplot2::theme_bw() +
ggplot2::xlab("Coeficiente") + ggplot2::ylab("Cantidad obs.") +
ggplot2::theme(legend.position = 'bottom')
histograma_coeficientes_clima
# Discriminando entre producto nuevo y usado
modelo_regresion_condicion_clima <- purrr::map(
.x = unique(data$condition),
.f = function(condicion) {
# Filtrar datos por condicion
data_condicion <- data %>%
dplyr::filter(condition == condicion)
modelo_regresion <- lm(formula_modelo_clima, data = data_condicion)
#broom::tidy(modelo_regresion) %>%
#  dplyr::mutate(signif = p.value < 0.05,
#                condition = condicion)
# Creacion de variable para nombrar la lista resultante
nombre_lista <- paste("Condicion:" , condicion)
# Crear objeto para guardar resultados
resultados <- list(modelo_regresion)
# Renombrar objeto resultado
resultados %<>% purrr::set_names(nombre_lista)
}
) %>% unlist(., recursive = FALSE) # Eliminar un nivel de la lista.
# Definir semilla
set.seed(1234)
combinaciones <- data %>%
dplyr::select(desktop, post) %>%
dplyr::distinct() %>%
dplyr::arrange(desktop) %>%
dplyr::mutate(seed = runif(4, min = 1000, max = 9999))
B = 1000 # Cantidad de repeticiones
bootstrap_media_manual <- purrr::map2_dfr(
.x = combinaciones$desktop,
.y = combinaciones$post,
.f = function(aplicacion, momento) {
# Semilla para cada iteracion
# Se filtran cada una de las combinaciones deseadas
# de aplicación y momento
combinaciones %>%
dplyr::filter(desktop == aplicacion, post == momento) %>%
dplyr::pull(seed) %>% # Se coloca una semilla para asegurar
# la reproducibilidad
set.seed()
# Seleccion y filtrado de la variable de interes
ventas <- data %>%
dplyr::filter(desktop == aplicacion, post == momento) %>%
dplyr::pull(itemsold)
results = c() # Vector para guardar resultados
# Dentro del for se iteran B veces seleccionado distintas muestras del
# vector de ventas con reposición para asegurar un n constante
# sobre cada iteración
# Luego se calcula la media de cada vector y se guarda en un objeto
for(b in 1:B){
bootSample = sample(ventas, size=length(ventas), replace=TRUE) # Remuestreo de los datos
thetaHat = mean(bootSample) # Calculo de la media de la muestra
results[b] = thetaHat # Guardar resultados
}
# Devuelve los resultados con cada media para cada una de las combinaciones
return(data.frame(desktop = aplicacion, post = momento, media = results))
}
)
# Calculo de los intervalos de confianza
bootstrap_intervalos_manual <- bootstrap_media_manual %>%
# Se agrupan los en función de las combinaciones deseadas
dplyr::group_by(desktop, post) %>%
# Se oredenan las medias estimadas en el paso anterior
# de menor a mayor para cada uno de los grupos
dplyr::arrange(media) %>%
# Sobre los grupos se seleccionan los valores que están
# en la vecindad del percentil 2.5 y 97.5, los límites del
# intervalo de confianza del 95%
dplyr::summarise(low.int = map_dbl(round(0.025*B), ~ media[.x]),
upp.int = map_dbl(round((1 - 0.025)*B), ~ media[.x])) %>%
# Se desagrupan los resultados
dplyr::ungroup() %>%
# Corrección de nombres para visualizar
dplyr::mutate(desktop = if_else(desktop == 1, 'Desktop', 'Móvil'),
post = if_else(post == 1, 'Post', 'Pre'))
# Evaluación de los resultados
bootstrap_media_manual %>%
dplyr::group_by(desktop, post) %>%
dplyr::summarise(media = mean(media))
bootstrap_intervalos_manual_plot <- ggplot(data = bootstrap_media_manual %>%
dplyr::mutate(desktop = if_else(desktop == 1, 'Desktop', 'Móvil'),
post = if_else(post == 1, 'Post', 'Pre')), ggplot2::aes(x = media)) +
ggplot2::geom_density() +
ggplot2::facet_wrap(desktop~post, scales = 'free') +
ggplot2::geom_vline(data = bootstrap_intervalos_manual, ggplot2::aes(xintercept = low.int), color = 'red') +
ggplot2::geom_vline(data = bootstrap_intervalos_manual, ggplot2::aes(xintercept = upp.int), color = 'red') +
ggplot2::theme_bw() +
ggplot2::ylab("Media")
bootstrap_intervalos_manual_plot
rmarkdown::render(
input = "./trabajo_practico.Rmd",
output_file = "trabajo_practico.pdf",
output_dir = output.dir
)
# Evaluación de los resultados
bootstrap_media_manual %>%
dplyr::group_by(desktop, post) %>%
dplyr::summarise(media = mean(media))
bootstrap_intervalos_manual_plot <- ggplot(data = bootstrap_media_manual %>%
dplyr::mutate(desktop = if_else(desktop == 1, 'Desktop', 'Móvil'),
post = if_else(post == 1, 'Post', 'Pre')), ggplot2::aes(x = media)) +
ggplot2::geom_density() +
ggplot2::facet_wrap(desktop~post, scales = 'free') +
ggplot2::geom_vline(data = bootstrap_intervalos_manual, ggplot2::aes(xintercept = low.int), color = 'red') +
ggplot2::geom_vline(data = bootstrap_intervalos_manual, ggplot2::aes(xintercept = upp.int), color = 'red') +
ggplot2::theme_bw() +
ggplot2::ylab("Media")
output.dir <- getwd()
rmarkdown::render(
input = "./trabajo_practico.Rmd",
output_file = "trabajo_practico.pdf",
output_dir = output.dir
)
potencia_prueba
# Definicion de funcion para el calculo de la potencia del test
potencia_prueba_test <- function(null.pi, true.pi, n, alpha = 0.05, alternative = "not equal") {
# TO DO: Faltan incluir controles de ejecución
# Seleccion del tipo de prueba a realizar: cola izquierda o derecha
# o a dos colas
# A partir de del tipo de prueba se obtiene el z critico
z.critico = switch(alternative, "less" = qnorm(alpha),
"greater" = qnorm(1-alpha), qnorm(1-alpha/2))
# Calculo del cuantil para el calculo de la probabilidad
cuantil.una.cola = (z.critico*sqrt(null.pi*(1-null.pi)/n) + null.pi - true.pi) / sqrt(true.pi*(1-true.pi)/n)
# Corrección para dos colas
if (alternative == "not equal") {
z.critico = qnorm(alpha/2)
# Calculo del cuantil para el calculo de la probabilidad
cuantil.dos.colas = (z.critico*sqrt(null.pi*(1-null.pi)/n) + null.pi - true.pi) / sqrt(true.pi*(1-true.pi)/n)
}
# Calculo de la potencia
potencia = switch(alternative,
"less" = pnorm(cuantil.una.cola),
"greater" = 1-pnorm(cuantil.una.cola),
pnorm(cuantil.dos.colas) + (1-pnorm(cuantil.una.cola))
)
# Devolver potencia
return(potencia)
}
# Evaluar la potencia del test para distintas
potencia_test <- purrr::map_dfr(
.x = seq_log(from = 100, to = 100000),
.f = function(n) {
# Vector de valores de pi
pistar <- seq(from = 0.5, to=.52, by=0.001)
potencia <- potencia_prueba_test(null.pi = 0.5, true.pi = pistar, n = n,
alpha = 0.05, alternative = 'greater')
data.frame(tamano_muestral = factor(n),
mustar = mustar,
potencia = potencia)
}
)
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
potencia_prueba_test(null.pi=0.45, true.pi=c(.5, .6, .8), n= c(10), alternative="greater")
seq_log(from = 100, to = 100000)
n = 100
# Vector de valores de pi
pistar <- seq(from = 0.5, to=.52, by=0.001)
potencia <- potencia_prueba_test(null.pi = 0.5, true.pi = pistar, n = n,
alpha = 0.05, alternative = 'greater')
data.frame(tamano_muestral = factor(n),
mustar = mustar,
potencia = potencia)
# Evaluar la potencia del test para distintas
potencia_test <- purrr::map_dfr(
.x = seq_log(from = 100, to = 100000),
.f = function(n) {
# Vector de valores de pi
pistar <- seq(from = 0.5, to=.52, by=0.001)
potencia <- potencia_prueba_test(null.pi = 0.5, true.pi = pistar, n = n,
alpha = 0.05, alternative = 'greater')
data.frame(tamano_muestral = factor(n),
pistar = pistar,
potencia = potencia)
}
)
potencia_prueba <- ggplot2::ggplot(data = potencia_test, ggplot2::aes(x = mustar, y = potencia, color = tamano_muestral)) +
ggplot2::geom_line() +
ggplot2::scale_color_discrete(name = 'Tamaño muestral') +
ggplot2::theme_bw() +
ggplot2::xlab(bquote(pi^'*')) + ggplot2::ylab("Potencia")
potencia_prueba
potencia_prueba <- ggplot2::ggplot(data = potencia_test, ggplot2::aes(x = pistar, y = potencia, color = tamano_muestral)) +
ggplot2::geom_line() +
ggplot2::scale_color_discrete(name = 'Tamaño muestral') +
ggplot2::theme_bw() +
ggplot2::xlab(bquote(pi^'*')) + ggplot2::ylab("Potencia")
potencia_prueba
rmarkdown::render(
input = "./trabajo_practico.Rmd",
output_file = "trabajo_practico.pdf",
output_dir = output.dir
)
rmarkdown::render(
input = "./trabajo_practico.Rmd",
output_file = "trabajo_practico.pdf",
output_dir = output.dir
)
rmarkdown::render(
input = "./trabajo_practico.Rmd",
output_file = "trabajo_practico.pdf",
output_dir = output.dir
)
x <- c(1,2,3,4,5,6,7,8,9,10)
y <- c(11,22,33,44,55,66,77,88,99,100)
lm(y~x)
x <- c(1,2,3,4,5,6,7,8,9,10)*10
y <- c(11,22,33,44,55,66,77,88,99,100)*10
lm(y~x)
# Definicion de funcion para el calculo de la potencia del test
potencia_prueba_test <- function(null.pi, true.pi, n, alpha = 0.05, alternative = "not equal") {
# TO DO: Faltan incluir controles de ejecución
# Seleccion del tipo de prueba a realizar: cola izquierda o derecha
# o a dos colas
# A partir de del tipo de prueba se obtiene el z critico
z.critico = switch(alternative, "less" = qnorm(alpha),
"greater" = qnorm(1-alpha), qnorm(1-alpha/2))
# Calculo del cuantil para el calculo de la probabilidad
cuantil.una.cola = (z.critico*sqrt(null.pi*(1-null.pi)/n) + null.pi - true.pi) / sqrt(true.pi*(1-true.pi)/n)
# Corrección para dos colas
if (alternative == "not equal") {
z.critico = qnorm(alpha/2)
# Calculo del cuantil para el calculo de la probabilidad
cuantil.dos.colas = (z.critico*sqrt(null.pi*(1-null.pi)/n) + null.pi - true.pi) / sqrt(true.pi*(1-true.pi)/n)
}
# Calculo de la potencia
potencia = switch(alternative,
"less" = pnorm(cuantil.una.cola),
"greater" = 1-pnorm(cuantil.una.cola),
pnorm(cuantil.dos.colas) + (1-pnorm(cuantil.una.cola))
)
# Devolver potencia
return(potencia)
}
potencia_prueba_test(null.pi=1.97, true.pi=c(1.95), n= c(20), alternative="greater")
c(20)
null.pi=1.97
true.pi=c(1.95)
n= c(20)
# Seleccion del tipo de prueba a realizar: cola izquierda o derecha
# o a dos colas
# A partir de del tipo de prueba se obtiene el z critico
z.critico = switch(alternative, "less" = qnorm(alpha),
"greater" = qnorm(1-alpha), qnorm(1-alpha/2))
alternative="greater"
# Seleccion del tipo de prueba a realizar: cola izquierda o derecha
# o a dos colas
# A partir de del tipo de prueba se obtiene el z critico
z.critico = switch(alternative, "less" = qnorm(alpha),
"greater" = qnorm(1-alpha), qnorm(1-alpha/2))
# Calculo del cuantil para el calculo de la probabilidad
cuantil.una.cola = (z.critico*sqrt(null.pi*(1-null.pi)/n) + null.pi - true.pi) / sqrt(true.pi*(1-true.pi)/n)
# Seleccion del tipo de prueba a realizar: cola izquierda o derecha
# o a dos colas
# A partir de del tipo de prueba se obtiene el z critico
z.critico = switch(alternative, "less" = qnorm(alpha),
"greater" = qnorm(1-alpha), qnorm(1-alpha/2))
alpha = 0.05
# Seleccion del tipo de prueba a realizar: cola izquierda o derecha
# o a dos colas
# A partir de del tipo de prueba se obtiene el z critico
z.critico = switch(alternative, "less" = qnorm(alpha),
"greater" = qnorm(1-alpha), qnorm(1-alpha/2))
# Calculo del cuantil para el calculo de la probabilidad
cuantil.una.cola = (z.critico*sqrt(null.pi*(1-null.pi)/n) + null.pi - true.pi) / sqrt(true.pi*(1-true.pi)/n)
null.pi*(1-null.pi)/n)
null.pi*(1-null.pi)/n
rnorm(n = 100, mean = 75, sd = 20)
gastos <- rnorm(n = 100, mean = 75, sd = 20)
mean(gastos)
sd(gastos)
gastos <- rnorm(n = 100, mean = 75, sd = 20)
mean(gastos)
sd(gastos)
gastos <- rnorm(n = 100, mean = 75, sd = 20)
mean(gastos)
sd(gastos)
qnorm(0.95)
install.packages("samplingbook")
samplingbook::sample.size.mean(
e = 0.02,
S = 0.0365
level = 0.9
)
samplingbook::sample.size.mean(
e = 0.02,
S = 0.0365,
level = 0.9
)
samplingbook::sample.size.mean
(1 + 0.9)/2
qt(-.88, df = 14)
qt(.88, df = 14)
qt(.95, df = 29)
qt(.975, df = 29)
qt(.975, df = 30)
qt(.975, df = 29)
var <- 0.8
n <- 20
xraya <- 1.97
zstat <- (xraya-2)/sqrt(var/n);  zstat
pvalor <- pnorm(zstat,lower.tail=TRUE) ; pvalor
pvalor <- pnorm(zstat,lower.tail=F) ; pvalor
pvalor <- pnorm(zstat,lower.tail=T) ; pvalor
mustar <- seq(from = 1.5, to=1.999, by=0.001) #me genero una secuencia de valor mustar para los cuales la H0 sería falsa
xcrit <- qnorm(0.05)*sqrt(var/n)+2
mustar <- seq(from = 1.5, to=1.999, by=0.001) #me genero una secuencia de valor mustar para los cuales la H0 sería falsa
qnorm(0.05)*sqrt(var/n)
xcrit <- qnorm(0.05)*sqrt(var/n)+mu
potencia <- pnorm((xcrit-mustar)/sqrt(var/n))
potencia
xcrit <- qnorm(0.05)*sqrt(var/n)+mu
mu <- 2
var <- 0.8
n <- 20
xraya <- 1.97
zstat <- (xraya-2)/sqrt(var/n);  zstat
pvalor <- pnorm(zstat,lower.tail=T) ; pvalor
mustar <- seq(from = 1.5, to=1.999, by=0.001) #me genero una secuencia de valor mustar para los cuales la H0 sería falsa
xcrit <- qnorm(0.05)*sqrt(var/n)+mu
potencia <- pnorm((xcrit-mustar)/sqrt(var/n))
potencia
potencia <- pnorm((xcrit-mustar)/sqrt(var/n))
beta <- 1-potencia
plot(mustar,potencia, ylim=c(0,1),type = "l", xlab= "mu*", ylab= "potencia", lwd=2)
mustar <- 1.95 #me genero una secuencia de valor mustar para los cuales la H0 sería falsa
xcrit <- qnorm(0.05)*sqrt(var/n)+mu
potencia <- pnorm((xcrit-mustar)/sqrt(var/n))
potencia
qnorm(0.05)
xcrit
pnorm((xcrit-mustar)/sqrt(var/n))
(xcrit-mustar)/sqrt(var/n)
zstat
zstat <- -0.00279
pvalor <- pnorm(zstat,lower.tail=T) ; pvalor
pnorm(zstat,lower.tail=T)
xraya
xraya <- 1.9
zstat <- (xraya-2)/sqrt(var/n);  zstat
pvalor <- pnorm(zstat,lower.tail=T) ; pvalor
zstat <- (xraya-mu)/sqrt(var/n);  zstat
pvalor <- pnorm(zstat,lower.tail=T) ; pvalor
zstat
xraya <- 1.97
zstat <- (xraya-mu)/sqrt(var/n);  zstat
pvalor <- pnorm(zstat,lower.tail=T) ; pvalor
xraya <- 1.7
zstat <- (xraya-mu)/sqrt(var/n);  zstat
pvalor <- pnorm(zstat,lower.tail=T) ; pvalor
n <- 100
xraya <- 1.97
zstat <- (xraya-mu)/sqrt(var/n);  zstat
pvalor <- pnorm(zstat,lower.tail=T) ; pvalor
mustar <- 1.97 #me genero una secuencia de valor mustar para los cuales la H0 sería falsa
xcrit <- qnorm(0.05)*sqrt(var/n)+mu
potencia <- pnorm((xcrit-mustar)/sqrt(var/n))
potencia
mu <- 2.8
var <- 2.65
n <- 13
xraya <- 4.03
zstat <- (xraya-mu)/sqrt(var/n);  zstat
pvalor <- pnorm(zstat,lower.tail=T) ; pvalor
pvalor <- pnorm(zstat,lower.tail=F) ; pvalor
pvalor <- pnorm(1.68,lower.tail=F) ; pvalor
pvalor <- pnorm(1.68,lower.tail=T) ; pvalor
pvalor <- pnorm(1.68) ; pvalor
pvalor <- pnorm(1.673) ; pvalor
pvalor <- pt(1.673, df = 12) ; pvalor
xcrit <- qt(0.05, df = 12); xcrit
pvalor <- pt(-1.673, df = 12) ; pvalor
pt(2.06, df = 29)
pvalor <- pt(2.06, df = 12) ; pvalor
xcrit <- qt(0.05, df = 12); xcrit
pvalor <- pt(2.06, df = 12, lower.tail = F) ; pvalor
xcrit <- qt(0.05, df = 12, lower.tail = F); xcrit
pt(2.06, df = 29, , lower.tail = F)
xcrit <- qt(0.05, df = 29, lower.tail = F); xcrit
pt(3.25, df = 29, , lower.tail = F)
xcrit <- qt(0.05, df = 29, lower.tail = F); xcrit
pt(-0.15, df = 29, , lower.tail = T)
pvalor <- pt(-0.15, df = 19, lower.tail = F) ; pvalor
xcrit <- qt(0.05, df = 19, lower.tail = T); xcrit
pvalor <- pt(-0.15, df = 19, lower.tail = F) ; pvalor
pvalor <- pt(-0.14, df = 19, lower.tail = F) ; pvalor
mustar <- 1.97 #me genero una secuencia de valor mustar para los cuales la H0 sería falsa
var
mu
potencia <- pnorm(-1.5, lower.tail = T)
potencia
potencia <- pnorm(-1.5, lower.tail = T, df = 29); potencia
potencia <- pt(-1.5, lower.tail = T, df = 29); potencia
potencia <- pt(-1.5, lower.tail = T, df = 19); potencia
pvalor <- pt(-0.47, df = 19, lower.tail = F) ; pvalor
pvalor <- pnorm(-0.47) ; pvalor
pvalor <- pt(-0.47, df = 19) ; pvalor
